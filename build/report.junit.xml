<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/brandon/Code/paragon/phpunit.xml.dist" tests="41" assertions="104" errors="0" failures="0" skipped="0" time="0.535647">
    <testsuite name="Paragon Test Suite" tests="41" assertions="104" errors="0" failures="0" skipped="0" time="0.535647">
      <testsuite name="Tests\Unit\Commands\GenerateEnumsCommandTest" file="tests/Unit/Commands/GenerateEnumsCommandTest.php" tests="10" assertions="39" errors="0" failures="0" skipped="0" time="0.214657">
        <testcase name="it ignores static methods" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it ignores static methods" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="1" time="0.133943"/>
        <testcase name="it generates abstract enum" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it generates abstract enum" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="8" time="0.008679"/>
        <testcase name="it ignores enums within ignored paths" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it ignores enums within ignored paths" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="1" time="0.008933"/>
        <testcase name="it generates number backed enums" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it generates number backed enums" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="8" time="0.008914"/>
        <testcase name="it generates non-backed enums" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it generates non-backed enums" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="8" time="0.009649"/>
        <testcase name="it generates enums recursively" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it generates enums recursively" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="1" time="0.008969"/>
        <testcase name="it ignores methods with 'IgnoreParagon' attribute" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it ignores methods with 'IgnoreParagon' attribute" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="1" time="0.008670"/>
        <testcase name="it ignores enums with 'IgnoreParagon' attribute" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it ignores enums with 'IgnoreParagon' attribute" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="1" time="0.008614"/>
        <testcase name="it generates string backed enums" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it generates string backed enums" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="8" time="0.009873"/>
        <testcase name="it creates public methods" file="tests/Unit/Commands/GenerateEnumsCommandTest.php::it creates public methods" class="Tests\Unit\Commands\GenerateEnumsCommandTest" classname="Tests.Unit.Commands.GenerateEnumsCommandTest" assertions="2" time="0.008414"/>
      </testsuite>
      <testsuite name="Tests\Unit\Commands\MakeJsEnumMethodCommandTest" file="tests/Unit/Commands/MakeJsEnumMethodCommandTest.php" tests="2" assertions="4" errors="0" failures="0" skipped="0" time="0.018431">
        <testcase name="it generates enum methods" file="tests/Unit/Commands/MakeJsEnumMethodCommandTest.php::it generates enum methods" class="Tests\Unit\Commands\MakeJsEnumMethodCommandTest" classname="Tests.Unit.Commands.MakeJsEnumMethodCommandTest" assertions="2" time="0.011133"/>
        <testcase name="it imports the method into the base enum" file="tests/Unit/Commands/MakeJsEnumMethodCommandTest.php::it imports the method into the base enum" class="Tests\Unit\Commands\MakeJsEnumMethodCommandTest" classname="Tests.Unit.Commands.MakeJsEnumMethodCommandTest" assertions="2" time="0.007298"/>
      </testsuite>
      <testsuite name="Tests\Architecture\AttributesTest" file="tests/Architecture/AttributesTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.041028">
        <testcase name="expect 'Kirschbaum\Paragon\Concerns\I…aragon' → toExtendNothing " file="tests/Architecture/AttributesTest.php::expect 'Kirschbaum\Paragon\Concerns\I…aragon' → toExtendNothing " class="Tests\Architecture\AttributesTest" classname="Tests.Architecture.AttributesTest" assertions="1" time="0.035204"/>
        <testcase name="expect 'Kirschbaum\Paragon\Concerns\I…aragon' → toHaveAttribute 'Attribute'" file="tests/Architecture/AttributesTest.php::expect 'Kirschbaum\Paragon\Concerns\I…aragon' → toHaveAttribute 'Attribute'" class="Tests\Architecture\AttributesTest" classname="Tests.Architecture.AttributesTest" assertions="1" time="0.005824"/>
      </testsuite>
      <testsuite name="Tests\Unit\Commands\ClearCacheCommandTest" file="tests/Unit/Commands/ClearCacheCommandTest.php" tests="1" assertions="2" errors="0" failures="0" skipped="0" time="0.009852">
        <testcase name="it removes the cache directory" file="tests/Unit/Commands/ClearCacheCommandTest.php::it removes the cache directory" class="Tests\Unit\Commands\ClearCacheCommandTest" classname="Tests.Unit.Commands.ClearCacheCommandTest" assertions="2" time="0.009852"/>
      </testsuite>
      <testsuite name="Tests\Architecture\PresetTest" file="tests/Architecture/PresetTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.059994">
        <testcase name="expect ['array_rand', 'assert', 'create_function', …] → not → toBeUsed " file="tests/Architecture/PresetTest.php::expect ['array_rand', 'assert', 'create_function', …] → not → toBeUsed " class="Tests\Architecture\PresetTest" classname="Tests.Architecture.PresetTest" assertions="1" time="0.046472"/>
        <testcase name="preset  → php " file="tests/Architecture/PresetTest.php::preset  → php " class="Tests\Architecture\PresetTest" classname="Tests.Architecture.PresetTest" assertions="1" time="0.013522"/>
      </testsuite>
      <testsuite name="Tests\Unit\Commands\MakeEnumMethodCommandTest" file="tests/Unit/Commands/MakeEnumMethodCommandTest.php" tests="2" assertions="4" errors="0" failures="0" skipped="0" time="0.016021">
        <testcase name="it imports the method into the base enum" file="tests/Unit/Commands/MakeEnumMethodCommandTest.php::it imports the method into the base enum" class="Tests\Unit\Commands\MakeEnumMethodCommandTest" classname="Tests.Unit.Commands.MakeEnumMethodCommandTest" assertions="2" time="0.008236"/>
        <testcase name="it generates enum methods" file="tests/Unit/Commands/MakeEnumMethodCommandTest.php::it generates enum methods" class="Tests\Unit\Commands\MakeEnumMethodCommandTest" classname="Tests.Unit.Commands.MakeEnumMethodCommandTest" assertions="2" time="0.007785"/>
      </testsuite>
      <testsuite name="Tests\Architecture\GeneratorsTest" file="tests/Architecture/GeneratorsTest.php" tests="5" assertions="5" errors="0" failures="0" skipped="0" time="0.036161">
        <testcase name="expect 'Kirschbaum\Paragon\Generators' → toBeInvokable " file="tests/Architecture/GeneratorsTest.php::expect 'Kirschbaum\Paragon\Generators' → toBeInvokable " class="Tests\Architecture\GeneratorsTest" classname="Tests.Architecture.GeneratorsTest" assertions="1" time="0.013949"/>
        <testcase name="expect 'Kirschbaum\Paragon\Generators' → not → toHavePublicMethodsBesides ['__construct', '__invoke']" file="tests/Architecture/GeneratorsTest.php::expect 'Kirschbaum\Paragon\Generators' → not → toHavePublicMethodsBesides ['__construct', '__invoke']" class="Tests\Architecture\GeneratorsTest" classname="Tests.Architecture.GeneratorsTest" assertions="1" time="0.005796"/>
        <testcase name="expect 'Kirschbaum\Paragon\Generators' → not → toHavePrivateMethodsBesides ['__construct', '__invoke']" file="tests/Architecture/GeneratorsTest.php::expect 'Kirschbaum\Paragon\Generators' → not → toHavePrivateMethodsBesides ['__construct', '__invoke']" class="Tests\Architecture\GeneratorsTest" classname="Tests.Architecture.GeneratorsTest" assertions="1" time="0.004974"/>
        <testcase name="expect 'Kirschbaum\Paragon\Generators' → classes  → toHaveSuffix 'Generator'" file="tests/Architecture/GeneratorsTest.php::expect 'Kirschbaum\Paragon\Generators' → classes  → toHaveSuffix 'Generator'" class="Tests\Architecture\GeneratorsTest" classname="Tests.Architecture.GeneratorsTest" assertions="1" time="0.005637"/>
        <testcase name="expect 'Kirschbaum\Paragon\Generators' → toExtendNothing " file="tests/Architecture/GeneratorsTest.php::expect 'Kirschbaum\Paragon\Generators' → toExtendNothing " class="Tests\Architecture\GeneratorsTest" classname="Tests.Architecture.GeneratorsTest" assertions="1" time="0.005804"/>
      </testsuite>
      <testsuite name="Tests\Architecture\CommandsTest" file="tests/Architecture/CommandsTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.028982">
        <testcase name="expect 'Kirschbaum\Paragon\Commands' → classes  → toHaveSuffix 'Command'" file="tests/Architecture/CommandsTest.php::expect 'Kirschbaum\Paragon\Commands' → classes  → toHaveSuffix 'Command'" class="Tests\Architecture\CommandsTest" classname="Tests.Architecture.CommandsTest" assertions="1" time="0.013306"/>
        <testcase name="expect 'Kirschbaum\Paragon\Commands' → not → toHavePrivateMethodsBesides ['__construct', 'handle']" file="tests/Architecture/CommandsTest.php::expect 'Kirschbaum\Paragon\Commands' → not → toHavePrivateMethodsBesides ['__construct', 'handle']" class="Tests\Architecture\CommandsTest" classname="Tests.Architecture.CommandsTest" assertions="1" time="0.005605"/>
        <testcase name="expect 'Kirschbaum\Paragon\Commands' → toHaveAttribute 'Symfony\Component\Console\Att…ommand'" file="tests/Architecture/CommandsTest.php::expect 'Kirschbaum\Paragon\Commands' → toHaveAttribute 'Symfony\Component\Console\Att…ommand'" class="Tests\Architecture\CommandsTest" classname="Tests.Architecture.CommandsTest" assertions="1" time="0.004991"/>
        <testcase name="expect 'Kirschbaum\Paragon\Commands' → not → toHavePublicMethodsBesides ['__construct', 'handle']" file="tests/Architecture/CommandsTest.php::expect 'Kirschbaum\Paragon\Commands' → not → toHavePublicMethodsBesides ['__construct', 'handle']" class="Tests\Architecture\CommandsTest" classname="Tests.Architecture.CommandsTest" assertions="1" time="0.005080"/>
      </testsuite>
      <testsuite name="Tests\Unit\Commands\GenerateJsEnumsCommandTest" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php" tests="10" assertions="39" errors="0" failures="0" skipped="0" time="0.090444">
        <testcase name="it generates number backed enums" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it generates number backed enums" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="8" time="0.009777"/>
        <testcase name="it ignores enums within ignored paths" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it ignores enums within ignored paths" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="1" time="0.009832"/>
        <testcase name="it generates non-backed enums" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it generates non-backed enums" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="8" time="0.008848"/>
        <testcase name="it ignores methods with 'IgnoreParagon' attribute" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it ignores methods with 'IgnoreParagon' attribute" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="1" time="0.007862"/>
        <testcase name="it ignores static methods" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it ignores static methods" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="1" time="0.008204"/>
        <testcase name="it ignores enums with 'IgnoreParagon' attribute" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it ignores enums with 'IgnoreParagon' attribute" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="1" time="0.008378"/>
        <testcase name="it generates enums recursively" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it generates enums recursively" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="1" time="0.008315"/>
        <testcase name="it generates abstract enum" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it generates abstract enum" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="8" time="0.008659"/>
        <testcase name="it creates public methods" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it creates public methods" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="2" time="0.009956"/>
        <testcase name="it generates string backed enums" file="tests/Unit/Commands/GenerateJsEnumsCommandTest.php::it generates string backed enums" class="Tests\Unit\Commands\GenerateJsEnumsCommandTest" classname="Tests.Unit.Commands.GenerateJsEnumsCommandTest" assertions="8" time="0.010612"/>
      </testsuite>
      <testsuite name="Tests\Architecture\DiscoveryTest" file="tests/Architecture/DiscoveryTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.020076">
        <testcase name="expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → toExtendNothing " file="tests/Architecture/DiscoveryTest.php::expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → toExtendNothing " class="Tests\Architecture\DiscoveryTest" classname="Tests.Architecture.DiscoveryTest" assertions="1" time="0.009605"/>
        <testcase name="expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → not → toHavePrivateMethodsBesides ['within']" file="tests/Architecture/DiscoveryTest.php::expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → not → toHavePrivateMethodsBesides ['within']" class="Tests\Architecture\DiscoveryTest" classname="Tests.Architecture.DiscoveryTest" assertions="1" time="0.005480"/>
        <testcase name="expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → not → toHavePublicMethodsBesides ['within']" file="tests/Architecture/DiscoveryTest.php::expect 'Kirschbaum\Paragon\Concerns\D…rEnums' → not → toHavePublicMethodsBesides ['within']" class="Tests\Architecture\DiscoveryTest" classname="Tests.Architecture.DiscoveryTest" assertions="1" time="0.004992"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
